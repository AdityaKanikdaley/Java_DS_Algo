Q) Convert a Binary Tree to a Doubly Linked List (without creating new DLL)
A) Here we have left and right of a tree, so, to convert it into a DLL, we can treat
   the (left = previous) and (right = next) of DLL.
   We here use inOrder traversal

   Code:
   Node prev = null, head = null;
   void convertToDLL(Node root){

        if(root == null) return null; //base condition

        convertToDLL(root.left); // L

        // N
        if(prev == null) head = root;
        else {
            root.left = prev;
            prev.right = root;
        }
        prev = root;

        convertToDLL(root.right); // R
   }

   Explanation:
    Tree:
            3
        5       2
              1
            4   6

    Result:
        5 <-> 3 <-> 4 <-> 1 <-> 6 <-> 2

********************************************************
Q) Calculate the diameter of a binary tree
A) Diameter = number of nodes in the largest path b/w two nodes

   Example:
            3
        2       4
              1   5
        Output = 4 (from 2 to 5 -> 2, 3, 4, 5 = number of nodes = 4)

                4
            5       6
        3         2
                   1
        Output = 6 (from 3 to 1 -> 3, 5, 4, 6, 2, 1 = number of nodes = 6)

              4
          1       3
        5   2   6
        Output = 5 (from 5 to 6 -> 5, 1, 4, 3, 6 = number of nodes = 5)

   Code: Time complexity = O(n^2)
       int diameter(Node root){
            if(root == null) return 0;
            int d_left = diameter(root.left)
            int d_right = diameter(root.right)
            int current = height(root.left) + height(root.right) + 1;

            return Math.max(current, Math.max(d_left, d_right));
       }
       int height(Node n){
            if(n == null) return 0;
            return 1 + Math.max(
                                height(n.left) + height(n.right)
                               );
       }

   Code: Time complexity = O(n)
         The height function itself will return the diameter.
       int ans = 0;
       int height(Node root){
            if(root == null) return 0;
            int left_height = height(root.left);
            int right_height = height(root.right);
            ans = Math.max(ans, 1 + left_height + right_height);

            return 1 + Math.max(left_height, right_height);
       }

********************************************************
Q) The Lowest common ancestor in a binary tree
A)
    Example:
            5
        2       3
      4
        1
       7 6

    LCA(7, 6) = 1
    LCA(6, 4) = 4
    LCA(1, 3) = 5

    Cases we can produce:
        1. cur = a || cur = b
        2. a -> came from left subtree
           b -> came from right subtree
        3. both a & b in any one subtree
        4. none of a & b in any subtree

    Code:
         Node lca(Node root, int n1, int n2){
            if(root == null) return null; //case 4 handled
            if(root.data == n1 || root.data == n2) return root;  //case 1 handled

            Node left = lca(root.left, n1, n2);
            Node right = lca(root.right, n1, n2);

            if(left == null) return right //a & b both found in right subtree, case 3 handled
            if(right == null) return left //a & b both found in left subtree, case 3 handled

            return root; //case 2 handled -> a-left/right, b-left/right subtree then LCA is root
         }

********************************************************
Q) Burn a binary tree starting from a leaf node
A)